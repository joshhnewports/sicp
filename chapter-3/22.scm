(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define empty-queue? (lambda () (null? front-ptr)))
    (define front-queue
      (lambda ()
	(if (empty-queue?)
	    (error "FRONT called with an empty queue" front-ptr)
	    (car front-ptr))))
    (define insert-queue!
      (lambda (item)
	(let ((new-pair (cons item '())))
	  (cond ((empty-queue?)
		 (set! front-ptr new-pair)
		 (set! rear-ptr new-pair)
		 front-ptr)
		(else
		 (set-cdr! rear-ptr new-pair)
		 (set! rear-ptr new-pair)
		 front-ptr)))))
    (define delete-queue!
      (lambda ()
	(cond ((empty-queue?)
	       (error "DELETE! called with an empty queue" front-ptr))
	      (else
	       (set! front-ptr (cdr front-ptr))
	       front-ptr))))
    (define print-queue front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) (empty-queue?))
	    ((eq? m 'front-queue) (front-queue))
	    ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) (delete-queue!))
	    ((eq? m 'print-queue) print-queue)
	    (else (error "Undefined operation -- MAKE-QUEUE" m))))
    dispatch))
