;;possibly doesn't work.
(define (apply-generic op . init-args)
  (define (apply-gen args)
    (if (null? args)
	(error)
	(let ((type-tags (map type-tag args)))
	  (let ((proc (get op type-tags)))
	    (if proc
		(apply proc (map contents args))
		(let ((coerced-args (coerce args)))
		  (apply-gen coerced-args)))))))
  (define (coerce args)
    (if (null? args)
	'()
	(let ((type-tags (map type-tag init-args))
	      (to-type (type-tag (car args))))
	  (let ((coercions (try-to-coerce type-tags to-type)))
	    (if (coercions-exist? coercions)
		(let ((coerced-args
		       (map (lambda (coercion arg)
			      (coercion arg))
			    coercions
			    args)))
		  coerced-args)
		(coerce (cdr args)))))))
  (define (try-to-coerce from-types to-type)
    (map (lambda (from)
	   (get-coercion from to-type))
	 from-types))
  (define (coercions-exist? coercions)
    (cond ((null? coercions) true)
	  ((false? (car coercions)) false)
	  (else (coercions-exist? (cdr coercions)))))
  (apply-gen init-args))
