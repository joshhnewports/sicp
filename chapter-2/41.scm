(define (generate-triples n)
  (flatmap (lambda (i)
	     (flatmap (lambda (j)
			(map (lambda (k)
			       (list i j k))
			     (enumerate-interval 1 n)))
		      (enumerate-interval 1 n)))
	   (enumerate-interval 1 n)))

(define (sum-s-triples n s)
  (filter (lambda (triple)
	    (let ((i (car triple))
		  (j (cadr triple))
		  (k (cadr (cdr triple))))
	      (and (distinct? i j k)
		   (sum-equals-s? (+ i j k) s))))
	  (generate-triples n)))

(define (distinct? i j k)
  (not (or (= i j)
	   (= i k)
	   (= j k))))

(define (sum-equals-s? sum s)
  (= s sum))
