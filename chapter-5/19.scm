(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
	(instructions-executed 0)
	(trace? false)
	(breakpoints '())
	(halted? false)) ;prevent breakpoints from permanently halting machine
    (let ((the-ops
           (list (list 'initialize-stack
                       (lambda () (stack 'initialize)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (trace inst)
	(if (not (null? (instruction-label inst)))
	    (begin (newline)
		   (display (instruction-label inst))))
	(newline)
	(display (instruction-text inst)))
      (define (halt inst breakpoint)
	(newline)
	(display (list 'halting-machine (breakpoint-label breakpoint) (breakpoint-offset breakpoint))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (let ((inst (car insts)))
		(if trace?
		    (trace inst))
		(let ((breakpoint (get-breakpoint inst breakpoints)))
		  (if (and breakpoint (not halted?))
		      (begin (set! halted? true)
			     (halt inst breakpoint))
		      (begin (set! halted? false)
			     (set! instructions-executed (+ instructions-executed 1))
			     ((instruction-execution-proc (car insts)))
			     (execute))))))))
      (define (dispatch message)
        (cond ((eq? message 'start)
	       (set! instructions-executed 0)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
               ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
	      ((eq? message 'instructions-executed) instructions-executed)
	      ((eq? message 'trace-on) (set! trace? true) 'trace-on)
	      ((eq? message 'trace-off) (set! trace? false) 'trace-off)
	      ((eq? message 'trace-on-reg)
	       (lambda (reg-name) ((lookup-register reg-name) 'trace-on)))
	      ((eq? message 'trace-off-reg)
	       (lambda (reg-name) ((lookup-register reg-name) 'trace-off)))
	      ((eq? message 'set-breakpoint)
	       (lambda (label offset) (cons breakpoints (cons label offset))))
	      ((eq? message 'cancel-breakpoint)
	       (lambda (label offset) (set! breakpoints (remove ??? breakpoints))))
	      ((eq? message 'cancel-all-breakpoints) (set! breakpoints '()))
	      ((eq? message 'proceed) (execute))
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))

(define (set-breakpoint machine label n)
  ((machine 'set-breakpoint) label n))

(define (cancel-breakpoint machine label n)
  ((machine 'cancel-breakpoint) label n))

(define (cancel-all-breakpoints machine)
  (machine 'cancel-all-breakpoints))

(define (proceed-machine machine)
  (machine 'proceed))
